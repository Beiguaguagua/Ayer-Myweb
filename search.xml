<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node中运用Mysql语句进行增改删查</title>
    <url>/Ayer-Myweb/2022/07/26/Node%E4%B8%AD%E8%BF%90%E7%94%A8Mysql%E8%AF%AD%E5%8F%A5%E8%BF%9B%E8%A1%8C%E5%A2%9E%E6%94%B9%E5%88%A0%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="导入Mysql模块"><a href="#导入Mysql模块" class="headerlink" title="导入Mysql模块"></a>导入Mysql模块</h2><p>首先安装mysql模块</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure>
<p>然后导入mysql模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">// 建立与mysql数据库的连接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="comment">// 数据库的IP地址</span></span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="comment">// 登录数据库的账号</span></span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 登录数据库的密码</span></span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定要操作哪一个数据库</span></span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;my_db_01&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="对数据进行四大项操作"><a href="#对数据进行四大项操作" class="headerlink" title="对数据进行四大项操作"></a>对数据进行四大项操作</h2><p>1.查询数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;select * from users&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// err</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现问题---&gt;&#x27;</span>+err.<span class="property">message</span>)&#125;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------查询成功------\n&quot;</span>+results+<span class="string">&quot;\n-------查询结束------&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2.插入数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>:<span class="string">&#x27;Spider-man&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 如果数据过多 sqlStr = &#x27;insert into users (username,password) set ?&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users (username,password) values(?,?)&#x27;</span></span><br><span class="line"><span class="comment">// db.query(sqlStr,user,(err,results)</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[user.<span class="property">username</span>,user.<span class="property">password</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现问题---&gt;&#x27;</span>+err.<span class="property">message</span>)&#125;</span><br><span class="line">    <span class="comment">// 利用affectedRows来判断是否插入数据成功</span></span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------插入成功------\n&#x27;</span>+results+<span class="string">&#x27;\n-------插入结束-------&#x27;</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.更新数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">username</span>:<span class="string">&#x27;aaa&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;000&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 简便方式:</span></span><br><span class="line"><span class="comment">// const sqlStr = &#x27;update users set ? where id=?&#x27;</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set username=?,password=? where id=?&#x27;</span></span><br><span class="line"><span class="comment">// db.query(sqlStr,user,(err,results)=&gt;&#123;&#125;)</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[user.<span class="property">username</span>,user.<span class="property">password</span>,user.<span class="property">id</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现问题---&gt;\n&#x27;</span>+err.<span class="property">message</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.删除数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStrOne = <span class="string">&#x27;delete from users where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStrOne,<span class="number">1</span>,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现问题---&gt;\n&#x27;</span>+err.<span class="property">message</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 标记删除</span></span><br><span class="line"><span class="keyword">const</span> sqlStrTwo = <span class="string">&#x27;update users set status=1 where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStrTwo,<span class="number">3</span>,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现问题---&gt;\n&#x27;</span>+err.<span class="property">message</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记删除成功&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句使用</title>
    <url>/Ayer-Myweb/2022/07/26/sql%E8%AF%AD%E5%8F%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="SQL的Select语句"><a href="#SQL的Select语句" class="headerlink" title="SQL的Select语句"></a>SQL的Select语句</h2><p>&lt;!&gt;大小写不敏感</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从from指定的[表中],查询出所有数据, * 表示所有列</span></span><br><span class="line"><span class="string">SELECT</span> <span class="string">*</span> <span class="string">FROM</span> <span class="string">表名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从from指定的[表中],查询出指定的 列名称 的数据</span></span><br><span class="line"><span class="string">SELECT</span> <span class="string">列名称</span> <span class="string">FROM</span> <span class="string">表名称</span></span><br></pre></td></tr></table></figure>

<h2 id="SQL的INSERT-INTO-语句"><a href="#SQL的INSERT-INTO-语句" class="headerlink" title="SQL的INSERT INTO 语句"></a>SQL的INSERT INTO 语句</h2><p>&lt;!&gt;向数据表中插入新的数据行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">INSERT</span> <span class="string">INTO</span> <span class="string">table_name(列1,列2......)</span> <span class="string">values</span> <span class="string">(值1,值2......)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.修改单个数据</span></span><br><span class="line"><span class="string">INSERT</span> <span class="string">INTO</span> <span class="string">users</span> <span class="string">(username,password)</span> <span class="string">values</span> <span class="string">(&#x27;Toy&#x27;,&#x27;246810&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改多个数据</span></span><br><span class="line"><span class="string">update</span> <span class="string">users</span> <span class="string">set</span> <span class="string">password</span> <span class="string">=</span> <span class="string">&#x27;123456&#x27;</span><span class="string">,status</span> <span class="string">=</span> <span class="string">&#x27;1&#x27;</span> <span class="string">where</span> <span class="string">username</span> <span class="string">=</span> <span class="string">&#x27;ls&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SQL的UPDATE语句"><a href="#SQL的UPDATE语句" class="headerlink" title="SQL的UPDATE语句"></a>SQL的UPDATE语句</h2><p>&lt;!&gt;修改表中的数据</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">UPDATE</span> <span class="string">表名称</span> <span class="string">SET</span> <span class="string">列名称</span> <span class="string">=</span> <span class="string">新值</span> <span class="string">WHERE</span> <span class="string">列名称</span> <span class="string">=</span> <span class="string">某值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子:</span></span><br><span class="line"></span><br><span class="line"><span class="string">update</span> <span class="string">users</span> <span class="string">set</span> <span class="string">password</span> <span class="string">=</span> <span class="string">&#x27;123456&#x27;</span> <span class="string">where</span> <span class="string">username</span> <span class="string">=</span> <span class="string">&#x27;ls&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SQL的DELETE语句"><a href="#SQL的DELETE语句" class="headerlink" title="SQL的DELETE语句"></a>SQL的DELETE语句</h2><p>&lt;!&gt;删除表中的数据</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">DELETE</span> <span class="string">FROM</span> <span class="string">表名称</span> <span class="string">WHERE</span> <span class="string">列名称</span> <span class="string">=</span> <span class="string">值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子:</span></span><br><span class="line"><span class="string">DELETE</span> <span class="string">FROM</span> <span class="string">users</span> <span class="string">WHERE</span> <span class="string">id</span> <span class="string">=</span> <span class="string">&#x27;4&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="SQL的ORDERBY语句"><a href="#SQL的ORDERBY语句" class="headerlink" title="SQL的ORDERBY语句"></a>SQL的ORDERBY语句</h2><p>&lt;!&gt;排序<br>DESC:降序排序<br>默认:升序排序(ASC)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.单个排序</span></span><br><span class="line"><span class="comment"># 升序</span></span><br><span class="line"><span class="string">Select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">users</span> <span class="string">ORDER</span> <span class="string">BY</span> <span class="string">status</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序</span></span><br><span class="line"><span class="string">Select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">users</span> <span class="string">ORDER</span> <span class="string">BY</span> <span class="string">status</span> <span class="string">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span><span class="string">.多重排序</span></span><br><span class="line"><span class="string">Select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">users</span> <span class="string">ORDER</span> <span class="string">BY</span> <span class="string">status</span> <span class="string">desc,</span> <span class="string">username</span> <span class="string">asc</span></span><br></pre></td></tr></table></figure>

<h2 id="SQL的COUNT-函数"><a href="#SQL的COUNT-函数" class="headerlink" title="SQL的COUNT(*)函数"></a>SQL的COUNT(*)函数</h2><p>&lt;!&gt;查询数量</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">select</span> <span class="string">count(*)</span> <span class="string">from</span> <span class="string">users</span> <span class="string">where</span> <span class="string">status</span> <span class="string">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">AS:给列起别名</span></span><br><span class="line"><span class="string">select</span> <span class="string">count(*)</span> <span class="string">AS</span> <span class="string">total</span> <span class="string">from</span> <span class="string">users</span> <span class="string">where</span> <span class="string">status</span> <span class="string">=</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Express路由</title>
    <url>/Ayer-Myweb/2022/07/25/Express%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在Express中,路由指的是客户端的请求与服务器处理函数之间的映射关系.<br>Express的路由分为三个部分:请求的类型,请求的URL地址,处理函数<br>格式如下:</p>
<h2 id="路由匹配的注意点"><a href="#路由匹配的注意点" class="headerlink" title="路由匹配的注意点"></a>路由匹配的注意点</h2><p>1.按照定义的先后顺序进行匹配<br>2.请求类型和请求的URL同时匹配成功,才会调用对应的处理函数</p>
<h2 id="挂在路由的方式"><a href="#挂在路由的方式" class="headerlink" title="挂在路由的方式"></a>挂在路由的方式</h2><p>1.直接挂在到app上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">res,req</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;post Request.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2.将路由抽离为单独的模块进行挂载<br>2.1步骤:<br>(1).创建路由模块对应的js文件<br>(2).调用express.Router()函数创建路由对象<br>(3).向路由对象上挂载具体的路由<br>(4).使用module.exports向外共享路由对象<br>(5).向app.use()函数注册路由模块</p>
<p>路由模块化.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块</span></span><br><span class="line"><span class="comment">// 作用:注册全局中间件</span></span><br><span class="line"><span class="comment">// 挂载前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由模块</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get User List.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Add new User&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>概念:业务中,中间处理的环节<br>格式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User Page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>中间件函数的简化形式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // 定义中间件函数</span></span><br><span class="line"><span class="comment">// const mw = function(req,res,next)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;这是一个简单的中间件函数&#x27;)</span></span><br><span class="line"><span class="comment">//     // 把流转关系转交给下一个中间件或路由</span></span><br><span class="line"><span class="comment">//     next()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 全局生效的中间件</span></span><br><span class="line"><span class="comment">// app.use(mw)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">res,req,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h2><p>1.多个中间件之间可以用共享同一份req,res:统一为req或res对象添加自定义的属性或方法<br>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">res,req,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求到达服务器的时间</span></span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 为req挂载自定义属性,从而把time共享给后面的路由</span></span><br><span class="line">    req.<span class="property">startTime</span> = time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home Page.&#x27;</span>+ req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User Page.&#x27;</span>+req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了局部生效的中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw1,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="同时使用多个局部中间件"><a href="#同时使用多个局部中间件" class="headerlink" title="同时使用多个局部中间件"></a>同时使用多个局部中间件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个局部生效的中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw2</span> = (<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个局部生效的中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw1,mw2,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,[mw1,mw2],<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h2><p>1.应用级别:绑定到app实例上的中间件<br>    app.use();app.get()&#x2F;app.post()</p>
<p>2.路由级别:绑定到Router上的中间<br>    express.Router()</p>
<p>3.错误级别:必须注册在所有路由之后<br>    处理函数 function(err,req,res,next){}</p>
<p>4.Express内置的中间件:<br>    (1)express.static:快速托管静态资源<br>    (2)express.json:解析json格式的请求体数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了错误级别的中间件,其他中间件,必须在路由之前进行配置</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在服务器中,可以使用req.body可以收到客户端发来的请求体数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>(3)express.urlencoded:解析URL-encoded格式的请求体数据
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了错误级别的中间件,其他中间件,必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 解析表达那中url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>())</span><br><span class="line">    <span class="comment">// 在服务器中,可以使用req.body可以收到客户端发来的请求体数据</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.第三方中间件:<br>    a.安装<br> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">&lt;body-parser&gt;</span></span><br></pre></td></tr></table></figure></p>
<pre><code>b.使用require()导入中间件
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &lt;body-parser&gt; = <span class="built_in">require</span>(<span class="string">&#x27;&lt;body-parser&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>c.调用app.use()注册并使用中间件
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(&lt;body-parser&gt;)</span><br></pre></td></tr></table></figure>

<p> 5.自定义中间件:<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 作用:解析请求体</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 监听req的data事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 监听req的end事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 在str中存放的是完整的请求体数据</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br><span class="line">        req.<span class="property">body</span> = body</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>渐变轮播图的实现</title>
    <url>/Ayer-Myweb/2022/07/24/%E6%B8%90%E5%8F%98%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><pre><code>需要提前在img数组中,把除去第一个图片中的opacity调整为0,加上transation:all time;
用前需要定义变量,获取html元素
direction:方向----left或者right
group:图片数组
</code></pre>
<h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">opacityRightChange</span>(<span class="params">direction,group</span>)&#123;</span><br><span class="line">				direction.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(flag&gt;=<span class="number">0</span>&amp;&amp;flag&lt;group.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">						flag++</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag &gt;=group.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">						flag = <span class="number">0</span></span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">function</span> <span class="title function_">opacityLeftChange</span>(<span class="params">direction,group</span>)&#123;</span><br><span class="line">				direction.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(flag &lt;=imglist.<span class="property">length</span>-<span class="number">1</span>&amp;&amp;flag &gt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">						flag--</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">						flag = imglist.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">						group[flag].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="title function_">opacityRightChange</span>(right,imglist)</span><br><span class="line"><span class="title function_">opacityLeftChange</span>(left,imglist)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript函数封装--上下缓动动画(只支持(滚动动画过渡,不适合左右位移))</title>
    <url>/Ayer-Myweb/2022/07/24/JavaScript%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85-%E4%B8%8A%E4%B8%8B%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB-%E5%8F%AA%E6%94%AF%E6%8C%81-%E6%BB%9A%E5%8A%A8%E5%8A%A8%E7%94%BB%E8%BF%87%E6%B8%A1-%E4%B8%8D%E9%80%82%E5%90%88%E5%B7%A6%E5%8F%B3%E4%BD%8D%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// obj:盒子对象</span></span><br><span class="line"><span class="comment">// target:目标位置</span></span><br><span class="line"><span class="comment">// time:运动时间</span></span><br><span class="line"><span class="comment">// callback:回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">obj,target,time,callback</span>)&#123;</span><br><span class="line">				<span class="comment">// 清除定时器,防止多次点击加快移动速度和创建新的定时器</span></span><br><span class="line">				<span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span><br><span class="line">				<span class="comment">// 结束</span></span><br><span class="line">				obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="comment">// 缓动动画原理</span></span><br><span class="line">					<span class="comment">// (目标位置-现在位置)/10</span></span><br><span class="line">					<span class="keyword">var</span> step = (target - <span class="variable language_">window</span>.<span class="property">pageYOffset</span>) / <span class="number">10</span>;</span><br><span class="line">					step  = step &gt; <span class="number">0</span> ?<span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span><br><span class="line">					<span class="comment">// 步行算法结束</span></span><br><span class="line">					<span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">pageYOffset</span> == target)&#123;</span><br><span class="line">						<span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span><br><span class="line">						<span class="comment">// 回调函数,如果有就执行,如果没有就不执行</span></span><br><span class="line">						<span class="keyword">if</span>(callback)&#123;</span><br><span class="line">							<span class="title function_">callback</span>()</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// 回调函数结束</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">// obj.style.left = window.pageYOffset + step +&#x27;px&#x27;</span></span><br><span class="line">					<span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="variable language_">window</span>.<span class="property">pageYOffset</span> + step)</span><br><span class="line">				&#125;,time)</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数运用"><a href="#函数运用" class="headerlink" title="函数运用"></a>函数运用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">move</span>(obj,time,target)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript函数封装--缓动动画(不支持&#39;回到顶部&#39;的动画的过渡)</title>
    <url>/Ayer-Myweb/2022/07/24/JavaScript%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85-%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB-%E4%B8%8D%E6%94%AF%E6%8C%81-%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8-%E7%9A%84%E5%8A%A8%E7%94%BB%E7%9A%84%E8%BF%87%E6%B8%A1/</url>
    <content><![CDATA[<h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// obj:盒子对象</span></span><br><span class="line"> <span class="comment">// target:目标位置</span></span><br><span class="line"> <span class="comment">// time:运动时间</span></span><br><span class="line"> <span class="comment">// callback:回调函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">obj,target,time,callback</span>)&#123;</span><br><span class="line">	<span class="comment">// 清除定时器,防止多次点击加快移动速度和创建新的定时器</span></span><br><span class="line">	<span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span><br><span class="line">	<span class="comment">// 结束</span></span><br><span class="line">	obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">// 缓动动画原理</span></span><br><span class="line">		<span class="comment">// (目标位置-现在位置)/10</span></span><br><span class="line">		<span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span><br><span class="line">		step  = step &gt; <span class="number">0</span> ?<span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span><br><span class="line">		<span class="comment">// 步行算法结束</span></span><br><span class="line">		<span class="keyword">if</span>(obj.<span class="property">offsetLeft</span> == target)&#123;</span><br><span class="line">			<span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span><br><span class="line">			<span class="comment">// 回调函数,如果有就执行,如果没有就不执行</span></span><br><span class="line">			<span class="keyword">if</span>(callback)&#123;</span><br><span class="line">				<span class="title function_">callback</span>()</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 回调函数结束</span></span><br><span class="line">		&#125;</span><br><span class="line">		obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">	&#125;,time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何使用函数"><a href="#如何使用函数" class="headerlink" title="如何使用函数"></a>如何使用函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中间的px和ms只是告诉你单位,在调用函数的时候不需要添加上去</span></span><br><span class="line"><span class="comment">// 如果函数名出现冲突,可以按照个人喜好修改</span></span><br><span class="line"><span class="comment">// 例如:function animateMove()&#123;&#125;等等</span></span><br><span class="line"><span class="title function_">move</span>(obj,___px,___ms)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>es6中不同函数的this指向问题(!)</title>
    <url>/Ayer-Myweb/2022/07/24/es6%E4%B8%AD%E4%B8%8D%E5%90%8C%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><pre><code>this指向window
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>+<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>()</span><br><span class="line">	<span class="comment">// fn(),fn.call()</span></span><br></pre></td></tr></table></figure>

<h2 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h2><pre><code>this指向的是o,也就是函数调用者
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">let</span> o = &#123;</span><br><span class="line">	<span class="attr">sayHi</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">    o.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure>

<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre><code>this指向的实例对象,也就是例子中的ldh,原型对象里面的this指向的是ldh这个实例对象
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>)&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>()</span><br></pre></td></tr></table></figure>

<h2 id="绑定事件函数"><a href="#绑定事件函数" class="headerlink" title="绑定事件函数"></a>绑定事件函数</h2><pre><code>this指向的是函数的调用者
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定时器函数"><a href="#定时器函数" class="headerlink" title="定时器函数"></a>定时器函数</h2><pre><code>this指向的也是window
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><pre><code>this指向的是window
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111</span>)</span><br><span class="line">&#125;)()</span><br><span class="line">   <span class="comment">// 立即执行函数是立即调用</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript,es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo入门-快速搭建Hexo</title>
    <url>/Ayer-Myweb/2022/07/24/Hexo%E5%85%A5%E9%97%A8-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo/</url>
    <content><![CDATA[<h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><p>这个是局部安装</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure>

<p>全局安装hexo</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure>

<h2 id="2-创建hexo文件夹"><a href="#2-创建hexo文件夹" class="headerlink" title="2.创建hexo文件夹"></a>2.创建hexo文件夹</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">init</span> <span class="string">documentTitle</span></span><br></pre></td></tr></table></figure>

<h2 id="3-跳转第二个步骤中的文件夹下"><a href="#3-跳转第二个步骤中的文件夹下" class="headerlink" title="3.跳转第二个步骤中的文件夹下"></a>3.跳转第二个步骤中的文件夹下</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">documentTitle</span></span><br></pre></td></tr></table></figure>

<h2 id="4-将npm包管理安装到该文件下"><a href="#4-将npm包管理安装到该文件下" class="headerlink" title="4.将npm包管理安装到该文件下"></a>4.将npm包管理安装到该文件下</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">instal</span></span><br></pre></td></tr></table></figure>

<h2 id="5-运行hexo"><a href="#5-运行hexo" class="headerlink" title="5.运行hexo"></a>5.运行hexo</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">server</span></span><br></pre></td></tr></table></figure>
<p>如果出现</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">INFO</span>  <span class="string">Hexo</span> <span class="string">is</span> <span class="string">running</span> <span class="string">at</span> <span class="string">http://localhost:4000/</span> <span class="string">.</span> <span class="string">Press</span> <span class="string">Ctrl+C</span> <span class="string">to</span> <span class="string">stop.</span></span><br></pre></td></tr></table></figure>
<p>则说明你的hexo框架基本已经运行完成了</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架安装</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/Ayer-Myweb/2022/07/24/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p>First article</p>
]]></content>
  </entry>
</search>
